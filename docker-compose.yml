services:
  # Backend Service (FastAPI)
  app:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile # All backend services use this Dockerfile
    container_name: job-boost-app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    working_dir: /app 
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./BackEnd:/app
      - ./uploads:/app/uploads
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # The Celery worker service
  worker:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile # Use the same Dockerfile as the 'app' service
    container_name: job-boost-worker
    command: celery -A tasks.celery_app.app worker --loglevel=info
    working_dir: /app 
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./BackEnd:/app
    env_file:
      - ./.env
    depends_on:
      - redis
      - postgres

  # The Celery beat scheduler service
  beat:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile # Use the same Dockerfile as the 'app' service
    container_name: job-boost-beat
    command: celery -A tasks.celery_app.app beat --loglevel=info -s /app/celery_data/celerybeat-schedule
    working_dir: /app 
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./BackEnd:/app
      - celery_data:/app/celery_data # FIX: Mount a named volume for persistent data
    env_file:
      - ./.env
    depends_on:
      - redis
      - postgres

  # Frontend Service (React + Vite Dev Server)
  frontend:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173" # Map port 5173 to 5173 for Vite dev server
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
  celery_data: {}
